#include <stdio.h>
#include <stdlib.h>
typedef struct {
    int value;
    int index;
} Element;
int compareAsc(const void *a, const void *b) {
    Element *x = (Element *)a;
    Element *y = (Element *)b;
    return x->value - y->value;
}
int compareDesc(const void *a, const void *b) {
    Element *x = (Element *)a;
    Element *y = (Element *)b;
    return y->value - x->value;
}
int countSwaps(int *arr, int n, int ascending) {
    Element *temp = (Element *)malloc(n * sizeof(Element));
    for (int i = 0; i < n; i++) {
        temp[i].value = arr[i];
        temp[i].index = i;
    }
    if (ascending) {
        qsort(temp, n, sizeof(Element), compareAsc);
    } else {
        qsort(temp, n, sizeof(Element), compareDesc);
    }
    int *visited = (int *)calloc(n, sizeof(int));
    int swaps = 0;
    for (int i = 0; i < n; i++) {
        if (visited[i] || temp[i].index == i)
            continue;
        int cycle_size = 0;
        int j = i;
        while (!visited[j]) {
            visited[j] = 1;
            j = temp[j].index;
            cycle_size++;
        }
        if (cycle_size > 1) {
            swaps += cycle_size - 1;
        }
    }
    free(temp);
    free(visited);
    return swaps;
}
int main() {
    int n;
    scanf("%d", &n);
    int *arr = (int *)malloc(n * sizeof(int));
    for (int i = 0; i < n; i++) {
        scanf("%d", &arr[i]);
    }
    int ascSwaps = countSwaps(arr, n, 1);
    int descSwaps = countSwaps(arr, n, 0);
    int result = (ascSwaps < descSwaps) ? ascSwaps : descSwaps;
    printf("%d\n", result);
    free(arr);
    return 0;
}
